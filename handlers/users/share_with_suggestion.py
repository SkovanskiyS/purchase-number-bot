from email import message

from aiogram.dispatcher import FSMContext

from data.config import REQUEST_CHAT_ID
from keyboards.inline.leave_request_btn import only_back, leave_request_inline
from loader import dp, bot, db
from aiogram.types import CallbackQuery
from aiogram import types

from states.register_state import GetSuggestion

@dp.callback_query_handler(text='share')
async def set_suggestion(call: CallbackQuery, state=FSMContext):
    result = db.get_white_list(call.from_user.id)
    if result[0]==0:
        await call.message.edit_text("üí°–†–∞—Å–ø–∏—à–∏—Ç–µ <b>–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö: (–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å)</b>",
                                     reply_markup=only_back)
        await GetSuggestion.suggestion.set()

@dp.callback_query_handler(text='back',state=GetSuggestion.suggestion)
async def back(call: CallbackQuery,state=FSMContext):
    await call.message.edit_text("üìõüëáüìõ<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –£–ö:",
                                 reply_markup=leave_request_inline)
    await state.finish()
@dp.message_handler(state=GetSuggestion.suggestion)
async def get_suggestion(message: types.Message,state:FSMContext):
    result_information = f"<b>üí°–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>\n<b>–Æ–∑–µ—Ä–Ω–µ–π–º</b>: @{message.from_user.username}\n<b>–ò–º—è –∏ –§–∞–º–∏–ª–∏—è:</b>{db.select_user(message.from_user.id)[2]}"f"" \
                         f"\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {db.select_user(message.from_user.id)[3]}" \
                         f"\n<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>{message.text}"
    try:
        await bot.send_message(chat_id=REQUEST_CHAT_ID, text=result_information)
        await message.answer("‚úÖüí°<b>–ò–¥–µ—è –ø—Ä–∏–Ω—è—Ç–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.</b> –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!")
        await state.finish()
    except Exception as err:
        await message.answer(err)

@dp.message_handler(content_types=['photo'], state=GetSuggestion.suggestion)
async def get_media(message: types.Message,state=FSMContext):
    result_information = f"<b>üí°–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>\n<b>–Æ–∑–µ—Ä–Ω–µ–π–º</b>: @{message.from_user.username}\n<b>–ò–º—è –∏ –§–∞–º–∏–ª–∏—è:</b>{db.select_user(message.from_user.id)[2]}"f"" \
                         f"\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {db.select_user(message.from_user.id)[3]}" \
                         f"\n<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>{message.caption}"
    if message.caption is None:
        await message.answer("üìõ‚õî–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç:")
        return
    try:
        await bot.send_photo(chat_id=REQUEST_CHAT_ID, photo=message.photo[-1].file_id, caption=result_information)
        await state.finish()
        await message.answer("‚úÖüí°<b>–ò–¥–µ—è –ø—Ä–∏–Ω—è—Ç–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.</b> –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!")
    except Exception as err:
        await message.answer(err)
    # try:
    #     await bot.send_photo(chat_id=CHAT_ID, photo=data.get("photo"), caption=result_information)
    # except Exception as err:
    #     await bot.send_message(chat_id=CHAT_ID, text=result_information)
