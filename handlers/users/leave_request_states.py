from aiogram.dispatcher.filters import Text
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, ReplyKeyboardRemove

import utils.dp_api.sqlite
from data.config import REQUEST_CHAT_ID
from keyboards.default.menu_btn import menuR_btns
from keyboards.inline.leave_request_btn import step_btns, only_back
from loader import bot, db
from handlers.users import dp
from states.register_state import LeaveRequest



@dp.callback_query_handler(text_contains="request", state=None)
async def call_leave_request(call: CallbackQuery):
    result = db.get_white_list(call.from_user.id)
    if result[0]==0:
        await call.message.delete()
        # await call.message.edit_reply_markup(reply_markup=step_btns)
        await call.message.answer("üìõ–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∫–ª–∞–¥–∫—É: –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",reply_markup=ReplyKeyboardRemove())
        await call.message.answer(
            '<b>–®–∞–≥ 1/3</b>. üìì–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä –ø—Ä–æ–±–ª–µ–º—ã (—É–ª–∏—Ü—É, –Ω–æ–º–µ—Ä –¥–æ–º–∞, –ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂ –∏ –∫–≤–∞—Ä—Ç–∏—Ä—É)'
            ' –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç:\n–û—Ç–º–µ–Ω–∞: /cancel', reply_markup=step_btns)
        await LeaveRequest.address.set()

@dp.message_handler(state="*",commands='cancel')
@dp.message_handler(Text(equals='cancel',ignore_case=True),state="*")
async def cancel_handler(message:types.Message,state=FSMContext):
    result = db.get_white_list(message.from_user.id)
    if result[0]==0:
        current_state = await state.get_state()
        if current_state is None:
            return
        await state.finish()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=menuR_btns)

@dp.message_handler(state=LeaveRequest.address)
async def leave_photo(message: types.Message, state: FSMContext):
    address_text = message.text
    async with state.proxy() as data:
        data["address"] = address_text

    await message.answer(
        '<b>–®–∞–≥ 2/3</b>. üñº–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ –∫ —Å–≤–æ–µ–π –∑–∞—è–≤–∫–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç:\n–û—Ç–º–µ–Ω–∞: /cancel',
        reply_markup=step_btns)
    await LeaveRequest.next()


@dp.message_handler(content_types=['photo', 'text'], state=LeaveRequest.photo)
async def message_photo_handler(message: types.Message, state=FSMContext):
    if message.text == None:
        file_id = message.photo[-1].file_id
        async with state.proxy() as data:
            data['photo'] = file_id
        await message.answer('<b>–®–∞–≥ 3/3</b>. üìõ–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö:\n–û—Ç–º–µ–Ω–∞: /cancel', reply_markup=only_back)
        await LeaveRequest.next()
    else:
        await message.answer(
            'üìõ–í –¥–∞–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –Ω—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å <b>—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</b> –∏–ª–∏ <b>–≤–∏–¥–µ–æ</b> –≤ –≤–∏–¥–µ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è. <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</b>: \n–û—Ç–º–µ–Ω–∞: /cancel')


@dp.message_handler(content_types=['video'], state=LeaveRequest.photo)
async def message_video_handler(message: types.Message, state=FSMContext):
    video_id = message.video.file_id
    async with state.proxy() as data:
        data['photo'] = video_id
    await LeaveRequest.next()
    await message.answer('<b>–®–∞–≥ 3/3</b>. üìõ–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö:\n–û—Ç–º–µ–Ω–∞: /cancel', reply_markup=only_back)


@dp.message_handler(content_types='text', state=LeaveRequest.reason)
async def message_reason_handler(message: types.Message, state=FSMContext):
    reason = message.text
    async with state.proxy() as data:
        data["reason"] = reason
    data = await state.get_data()
    database = db.select_user(message.chat.id)
    print(str(database))
    result_information = f"<b>‚õî–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∂–∞–ª–æ–±–∞</b>\n<b>–Æ–∑–µ—Ä–Ω–µ–π–º</b>: @{message.from_user.username}\n<b>–ò–º—è –∏ –§–∞–º–∏–ª–∏—è:</b>{database[2]}"f"" \
                         f"\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {database[3]}" \
                         f"\n<b>–ê–¥—Ä–µ—Å</b>: {data.get('address')}" \
                         f"\n<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>{data.get('reason')}"
    try:
        await bot.send_photo(chat_id=REQUEST_CHAT_ID, photo=data.get("photo"), caption=result_information)
    except Exception as err:
        await bot.send_message(chat_id=REQUEST_CHAT_ID, text=result_information)
    await message.answer("‚úÖ<b>–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!</b>",reply_markup=menuR_btns)

    await state.finish()
