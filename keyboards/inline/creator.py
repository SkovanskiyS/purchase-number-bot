from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup

from database.pages import current_page
from keyboards.inline.constructor import Constructor
from lexicon.lexicon_RU import LEXICON_INLINE_BUTTONS, LEXICON_OPERATOR_INFO, LEXICON_CONFIRMATION, LEXICON_PAYMENT
from misc.cost_modification import change_price
from services.API_5sim.fetch_countries import FilterData
from services.API_5sim.fetch_operator import GetPrice


class CreateInlineBtn(Constructor):
    @staticmethod
    def services():
        return Constructor.create_inline_btn([[{'telegram': LEXICON_INLINE_BUTTONS['telegram']}
                                                  , {'openai': LEXICON_INLINE_BUTTONS['chatgpt']}]])

    @staticmethod
    def confirmation():
        return Constructor.create_inline_btn([[{'confirm_callback': LEXICON_CONFIRMATION['confirm']}]])

    @staticmethod
    def payment():
        return Constructor.create_inline_btn([[{'payme': LEXICON_PAYMENT['payme']},
                                               {'click': LEXICON_PAYMENT['click']}],
                                              [{'qiwi': LEXICON_PAYMENT['qiwi']}]])

    @staticmethod
    def language():
        return Constructor.create_inline_btn([[{'lang:ru': 'üá∑üá∫'},
                                               {'lang:uzb': 'üá∫üáø'},
                                               {'lang:eng': 'üá∫üá∏'}]])


class Pagination:
    def __init__(self, current_page):
        self.page: int = current_page

    def __call__(self, *args, **kwargs) -> InlineKeyboardMarkup:
        filtered_data = FilterData()
        data_ct = {'afghanistan': '–ê—Ñ–≥–∞–Ω–∏—Å—Ç–∞–Ω', 'albania': '–ê–ª–±–∞–Ω–∏—è', 'algeria': '–ê–ª–∂–∏—Ä', 'angola': '–ê–Ω–≥–æ–ª–∞', 'anguilla': '–ê–Ω–≥–∏–ª—å—è', 'antiguaandbarbuda': '–ê–Ω—Ç–∏–≥—É–∞ –∏ –ë–∞—Ä–±—É–¥–∞', 'argentina': '–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞', 'armenia': '–ê—Ä–º–µ–Ω–∏—è', 'aruba': '–ê—Ä—É–±–∞', 'australia': '–ê–≤—Å—Ç—Ä–∞–ª–∏—è', 'austria': '–ê–≤—Å—Ç—Ä–∏—è', 'azerbaijan': '–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω', 'bahamas': '–ë–∞–≥–∞–º—ã', 'bahrain': '–ë–∞—Ö—Ä–µ–π–Ω', 'bangladesh': '–ë–∞–Ω–≥–ª–∞–¥–µ—à', 'barbados': '–ë–∞—Ä–±–∞–¥–æ—Å', 'belarus': '–ë–µ–ª–∞—Ä—É—Å—å', 'belgium': '–ë–µ–ª—å–≥–∏—è', 'belize': '–ë–µ–ª–∏–∑', 'benin': '–ë–µ–Ω–∏–Ω', 'bhutane': '–ë—É—Ç–∞–Ω', 'bih': '–ë–æ—Å–Ω–∏—è –∏ –ì–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω–∞', 'bolivia': '–ë–æ–ª–∏–≤–∏—è', 'botswana': '–ë–æ—Ç—Å–≤–∞–Ω–∞', 'brazil': '–ë—Ä–∞–∑–∏–ª–∏—è', 'bulgaria': '–ë–æ–ª–≥–∞—Ä–∏—è', 'burkinafaso': '–ë—É—Ä–∫–∏–Ω–∞-–§–∞—Å–æ', 'burundi': '–ë—É—Ä—É–Ω–¥–∏', 'cambodia': '–ö–∞–º–±–æ–¥–∂–∏', 'cameroon': '–ö–∞–º–µ—Ä—É–Ω', 'canada': '–ö–∞–Ω–∞–¥–∞', 'capeverde': '–ö–∞–±–æ-–í–µ—Ä–¥–µ', 'caymanislands': '–û—Å—Ç—Ä–æ–≤–∞ –ö–∞–π–º–∞–Ω', 'chad': '–ß–∞–¥', 'chile': '–ß–∏–ª–∏', 'china': '–ö–∏—Ç–∞–π', 'colombia': '–ö–æ–ª—É–º–±–∏—è', 'comoros': '–ö–æ–º–æ—Ä—ã', 'congo': '–ö–æ–Ω–≥–æ', 'costarica': '–ö–æ—Å—Ç–∞-–†–∏–∫–∞', 'croatia': '–•–æ—Ä–≤–∞—Ç–∏—è', 'cyprus': '–ö–∏–ø—Ä', 'czech': '–ß–µ—Ö–∏—è', 'denmark': '–î–∞–Ω–∏—è', 'djibouti': '–î–∂–∏–±—É—Ç–∏', 'dominica': '–î–æ–º–∏–Ω–∏–∫–∞', 'dominicana': '–î–æ–º–∏–Ω–∏–∫–∞–Ω—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞', 'easttimor': '–í–æ—Å—Ç–æ—á–Ω—ã–π –¢–∏–º–æ—Ä', 'ecuador': '–≠–∫–≤–∞–¥–æ—Ä', 'egypt': '–ï–≥–∏–ø–µ—Ç', 'england': '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', 'equatorialguinea': '–≠–∫–≤–∞—Ç–æ—Ä–∏–∞–ª—å–Ω–∞—è –ì–≤–∏–Ω–µ—è', 'eritrea': '–≠—Ä–∏—Ç—Ä–µ—è', 'estonia': '–≠—Å—Ç–æ–Ω–∏—è', 'ethiopia': '–≠—Ñ–∏–æ–ø–∏—è', 'finland': '–§–∏–Ω–ª—è–Ω–¥–∏—è', 'france': '–§—Ä–∞–Ω—Ü–∏—è', 'frenchguiana': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è –ì–≤–∏–∞–Ω–∞', 'gabon': '–ì–∞–±–æ–Ω', 'gambia': '–ì–∞–º–±–∏—è', 'georgia': '–ì—Ä—É–∑–∏—è', 'germany': '–ì–µ—Ä–º–∞–Ω–∏—è', 'ghana': '–ì–∞–Ω–∞', 'greece': '–ì—Ä–µ—Ü–∏—è', 'grenada': '–ì—Ä–µ–Ω–∞–¥–∞', 'guadeloupe': '–ì–≤–∞–¥–µ–ª—É–ø–∞', 'guatemala': '–ì–≤–∞—Ç–µ–º–∞–ª–∞', 'guinea': '–ì–≤–∏–Ω–µ—è', 'guineabissau': '–ì–≤–∏–Ω–µ—è-–ë–∏—Å–∞—É', 'guyana': '–ì–∞–π–∞–Ω–∞', 'haiti': '–ì–∞–∏—Ç–∏', 'honduras': '–ì–æ–Ω–¥—É—Ä–∞—Å', 'hongkong': '–ì–æ–Ω–∫–æ–Ω–≥', 'hungary': '–í–µ–Ω–≥—Ä–∏—è', 'india': '–ò–Ω–¥–∏—è', 'indonesia': '–ò–Ω–¥–æ–Ω–µ–∑–∏—è', 'ireland': '–ò—Ä–ª–∞–Ω–¥–∏—è', 'israel': '–ò–∑—Ä–∞–∏–ª—å', 'italy': '–ò—Ç–∞–ª–∏—è', 'ivorycoast': "–ö–æ—Ç-–¥'–ò–≤—É–∞—Ä", 'jamaica': '–Ø–º–∞–π–∫–∞', 'japan': '–Ø–ø–æ–Ω–∏—è', 'jordan': '–ò–æ—Ä–¥–∞–Ω–∏—è', 'kazakhstan': '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', 'kenya': '–ö–µ–Ω–∏—è', 'kuwait': '–ö—É–≤–µ–π—Ç', 'kyrgyzstan': '–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω', 'laos': '–õ–∞–æ—Å', 'latvia': '–õ–∞—Ç–≤–∏—è', 'lesotho': '–õ–µ—Å–æ—Ç–æ', 'liberia': '–õ–∏–±–µ—Ä–∏—è', 'lithuania': '–õ–∏—Ç–≤–∞', 'luxembourg': '–õ—é–∫—Å–µ–º–±—É—Ä–≥', 'macau': '–ú–∞–∫–∞–æ', 'madagascar': '–ú–∞–¥–∞–≥–∞—Å–∫–∞—Ä', 'malawi': '–ú–∞–ª–∞–≤–∏', 'malaysia': '–ú–∞–ª–∞–π–∑–∏—è', 'maldives': '–ú–∞–ª—å–¥–∏–≤—ã', 'mauritania': '–ú–∞–≤—Ä–∏—Ç–∞–Ω–∏—è', 'mauritius': '–ú–∞–≤—Ä–∏–∫–∏–π', 'mexico': '–ú–µ–∫—Å–∏–∫–∞', 'moldova': '–ú–æ–ª–¥–∞–≤–∏—è', 'mongolia': '–ú–æ–Ω–≥–æ–ª–∏—è', 'montenegro': '–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è', 'montserrat': '–ú–æ–Ω—Ç—Å–µ—Ä—Ä–∞—Ç', 'morocco': '–ú–∞—Ä–æ–∫–∫–æ', 'mozambique': '–ú–æ–∑–∞–º–±–∏–∫', 'myanmar': '–ú—å—è–Ω–º–∞', 'namibia': '–ù–∞–º–∏–±–∏—è', 'nepal': '–ù–µ–ø–∞–ª', 'netherlands': '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã', 'newcaledonia': '–ù–æ–≤–∞—è –ö–∞–ª–µ–¥–æ–Ω–∏—è', 'newzealand': '–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è', 'nicaragua': '–ù–∏–∫–∞—Ä–∞–≥—É–∞', 'niger': '–ù–∏–≥–µ—Ä', 'nigeria': '–ù–∏–≥–µ—Ä–∏—è', 'northmacedonia': '–°–µ–≤–µ—Ä–Ω–∞—è –ú–∞–∫–µ–¥–æ–Ω–∏—è', 'norway': '–ù–æ—Ä–≤–µ–≥–∏—è', 'oman': '–û–º–∞–Ω', 'pakistan': '–ü–∞–∫–∏—Å—Ç–∞–Ω', 'panama': '–ü–∞–Ω–∞–º–∞', 'papuanewguinea': '–ü–∞–ø—É–∞-–ù–æ–≤–∞—è –ì–≤–∏–Ω–µ—è', 'paraguay': '–ü–∞—Ä–∞–≥–≤–∞–π', 'peru': '–ü–µ—Ä—É', 'philippines': '–§–∏–ª–∏–ø–ø–∏–Ω—ã', 'poland': '–ü–æ–ª—å—à–∞', 'portugal': '–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è', 'puertorico': '–ü—É—ç—Ä—Ç–æ-–†–∏–∫–æ', 'reunion': '–†–µ—é–Ω—å–æ–Ω', 'romania': '–†—É–º—ã–Ω–∏—è', 'russia': '–†–æ—Å—Å–∏—è', 'rwanda': '–†—É–∞–Ω–¥–∞', 'saintkittsandnevis': '–°–µ–Ω—Ç-–ö–∏—Ç—Å –∏ –ù–µ–≤–∏—Å', 'saintlucia': '–°–µ–Ω—Ç-–õ—é—Å–∏—è', 'saintvincentandgrenadines': '–°–µ–Ω—Ç-–í–∏–Ω—Å–µ–Ω—Ç –∏ –ì—Ä–µ–Ω–∞–¥–∏–Ω—ã', 'salvador': '–°–∞–ª—å–≤–∞–¥–æ—Ä', 'samoa': '–°–∞–º–æ–∞', 'saotomeandprincipe': '–°–∞–Ω-–¢–æ–º–µ –∏ –ü—Ä–∏–Ω—Å–∏–ø–∏', 'saudiarabia': '–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è', 'senegal': '–°–µ–Ω–µ–≥–∞–ª', 'serbia': '–°–µ—Ä–±–∏—è', 'seychelles': '–°–µ–π—à–µ–ª—ã', 'sierraleone': '–°—å–µ—Ä—Ä–∞-–õ–µ–æ–Ω–µ', 'singapore': '–°–∏–Ω–≥–∞–ø—É—Ä', 'slovakia': '–°–ª–æ–≤–∞–∫–∏—è', 'slovenia': '–°–ª–æ–≤–µ–Ω–∏—è', 'solomonislands': '–°–æ–ª–æ–º–æ–Ω–æ–≤—ã –æ—Å—Ç—Ä–æ–≤–∞', 'southafrica': '–Æ–∂–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞', 'southkorea': '–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è', 'spain': '–ò—Å–ø–∞–Ω–∏—è', 'srilanka': '–®—Ä–∏-–õ–∞–Ω–∫–∞', 'suriname': '–°—É—Ä–∏–Ω–∞–º', 'swaziland': '–≠—Å–≤–∞—Ç–∏–Ω–∏', 'sweden': '–®–≤–µ—Ü–∏—è', 'switzerland': '–®–≤–µ–π—Ü–∞—Ä–∏—è', 'taiwan': '–¢–∞–π–≤–∞–Ω—å', 'tajikistan': '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω', 'tanzania': '–¢–∞–Ω–∑–∞–Ω–∏—è', 'thailand': '–¢–∞–∏–ª–∞–Ω–¥', 'tit': '–¢—Ä–∏–Ω–∏–¥–∞–¥ –∏ –¢–æ–±–∞–≥–æ', 'togo': '–¢–æ–≥–æ', 'tonga': '–¢–æ–Ω–≥–∞', 'tunisia': '–¢—É–Ω–∏—Å', 'turkey': '–¢—É—Ä—Ü–∏—è', 'turkmenistan': '–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω', 'turksandcaicos': '–¢–µ—Ä–∫—Å –∏ –ö–∞–π–∫–æ—Å', 'uganda': '–£–≥–∞–Ω–¥–∞', 'ukraine': '–£–∫—Ä–∞–∏–Ω–∞', 'uruguay': '–£—Ä—É–≥–≤–∞–π', 'usa': '–°–®–ê', 'uzbekistan': '–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω', 'venezuela': '–í–µ–Ω–µ—Å—É—ç–ª–∞', 'vietnam': '–í—å–µ—Ç–Ω–∞–º', 'virginislands': '–í–∏—Ä–≥–∏–Ω—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞', 'zambia': '–ó–∞–º–±–∏—è', 'zimbabwe': '–ó–∏–º–±–∞–±–≤–µ'}
        all_data = [{k: v} for k, v in data_ct.items()]
        count_of_pages = len(all_data) // 10
        sorted_data = [[] for _ in range(count_of_pages + 1)]
        offset_start = 0
        offset_end = 10

        for i in sorted_data:
            i.extend(all_data[offset_start:offset_end])
            offset_start = offset_end
            offset_end += 10

        if current_page['page'] < 0:
            current_page['page'] = 17
        elif current_page['page'] > 17:
            current_page['page'] = 0

        self.page = current_page['page']
        bottom_btn = [{'previous': '<<'}, {'page': f'{self.page}/{count_of_pages}'}, {'next': '>>'}]
        countries_btn = [{key: value for d in sorted_data[self.page] for key, value in d.items()}]
        btn = Constructor.create_inline_btn([countries_btn, bottom_btn])
        return btn

    """
    old version
    and should be optimized
    """
    # filtered_data = FilterData()
    # all_data: list[dict[str:str]] = list({k: v} for k, v in filtered_data().items())
    # sorted_data = []
    # count_of_pages: int = len(all_data) // 10
    # offset_start: int = 0
    # offset_end: int = 10
    # # create page indexes
    # for i in range(count_of_pages + 1):
    #     sorted_data.insert(i, [])
    # for i in sorted_data:
    #     for j in all_data[offset_start:offset_end]:
    #         i.append(j)
    #     offset_start = offset_end
    #     offset_end += 10
    # if 0 <= self.page <= count_of_pages:
    #     bottom_btn = [{'previous': '<<'}, {'page': f'{self.page}/{count_of_pages}'}, {'next': '>>'}]
    #     countries_btn = [{key: value for d in sorted_data[self.page] for key, value in d.items()}]
    #     btn = Constructor.create_inline_btn([countries_btn, bottom_btn])
    #     return btn
    # else:
    #     from database.pages import current_page
    #     current_page['page'] = 0
    #     self.page = 0
    #     bottom_btn = [{'previous': '<<'}, {'page': f'{self.page}/{count_of_pages}'}, {'next': '>>'}]
    #     countries_btn = [{key: value for d in sorted_data[self.page] for key, value in d.items()}]
    #     btn = Constructor.create_inline_btn([countries_btn, bottom_btn])
    #     return btn


class Operator:
    def __init__(self, country, product):
        self.country = country
        self.product = product
        self.description = ''

    def __call__(self):
        url = f'https://5sim.net/v1/guest/prices?country={self.country}&product={self.product}'
        getPrice = GetPrice(url)
        response_dict: dict = getPrice()
        operators_dict: dict = dict()
        for item in response_dict[self.country][self.product]:
            cost: str = response_dict[self.country][self.product][item]['cost']
            # cost modification
            cost = change_price(cost)
            quantity: str = response_dict[self.country][self.product][item]['count']
            rate: str = ''
            if 'rate' not in response_dict[self.country][self.product][item]:
                response_dict[self.country][self.product][item]['rate'] = 'None'
                rate += response_dict[self.country][self.product][item]['rate']
            else:
                rate += str(response_dict[self.country][self.product][item]['rate']) + '/100 %'

            operators_dict[item] = item

            self.description += f"""\n\t<b>{str(item).upper()}</b>:\n
<i>{LEXICON_OPERATOR_INFO['cost']}: {cost} </i>
<i>{LEXICON_OPERATOR_INFO['quantity']}: {quantity} </i>
<i>{LEXICON_OPERATOR_INFO['rate']}: {rate} </i>

            """
        return Constructor.create_inline_btn([[operators_dict]])
